{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","httpService","_http","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","error","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","Error","erro","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","equals","forEach"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService{\r\n\r\n        /**\r\n                 * 0: requisicao ainda nao iniciada\r\n                 * 1: conexao com o servidor estabelecida\r\n                 * 2: requisicao recebida\r\n                 * 3: processando requisicao\r\n                 * 4: requisicao concluida e a resposta esta pronta\r\n                 */\r\n\r\n    constructor(httpService){\r\n        this._http = httpService;\r\n    }\r\n\r\n    obterNegociacoesDaSemana(){\r\n        return new Promise((resolve, reject)=>{\r\n                this._http.get('http://localhost:3000/negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto =>                                              \r\n                        new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)));\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);    \r\n                    reject(\"Não foi possível obter as negociacoes da semana.\")\r\n                });                       \r\n                   \r\n        });\r\n\r\n    \r\n    }//obterNegociacoesDaSemana()\r\n    \r\n\r\n    obterNegociacoesDaSemanaRetrasada(){\r\n        return new Promise((resolve, reject)=>{\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', 'http://localhost:3000/negociacoes/retrasada');\r\n    \r\n            xhr.onreadystatechange = () =>{\r\n            \r\n    \r\n                 if(xhr.readyState == 4){\r\n                     if(xhr.status ==200){\r\n                        console.log(\"Buscando negociacoes\");\r\n                        let negociacoes = JSON.parse(xhr.responseText).map(objeto =>                                              \r\n                             new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)\r\n                        );\r\n                        //this._mensagem.texto = 'As negociacoes foram importadas com sucesso!';\r\n                        resolve(negociacoes);\r\n                       \r\n                     }else{\r\n                        console.log(xhr.responseText);\r\n                        //this._mensagem.texto = 'Não foi possível obter as negociacoes da semana';\r\n                        reject('Não foi possível obter as negociacoes da semana retrasada');\r\n                     }//fim else\r\n                 }//fim if externo\r\n            }// xhr.onreadystatechange = () =>{\r\n    \r\n    \r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n\r\n    obterNegociacoesDaSemanaAnterior(){\r\n        return new Promise((resolve, reject)=>{\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', 'http://localhost:3000/negociacoes/anterior');\r\n    \r\n            xhr.onreadystatechange = () =>{\r\n            \r\n    \r\n                 if(xhr.readyState == 4){\r\n                     if(xhr.status ==200){\r\n                        console.log(\"Buscando negociacoes\");\r\n                        let negociacoes = JSON.parse(xhr.responseText).map(objeto =>                                              \r\n                             new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)\r\n                        );\r\n                        //this._mensagem.texto = 'As negociacoes foram importadas com sucesso!';\r\n                        resolve(negociacoes);\r\n                       \r\n                     }else{\r\n                        console.log(xhr.responseText);\r\n                        //this._mensagem.texto = 'Não foi possível obter as negociacoes da semana';\r\n                        reject('Não foi possível obter as negociacoes da semana anterior');\r\n                     }//fim else\r\n                 }//fim if externo\r\n            }// xhr.onreadystatechange = () =>{\r\n    \r\n    \r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n\r\n\r\n    \r\n    obterNegociacoes() {\r\n\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n\r\n    } \r\n\r\n\r\n    cadastra(negociacao){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection =>               \r\n                    new NegociacaoDao(connection)\r\n                    .adiciona(negociacao)\r\n                    .then(()=>'Negociação adicionada com sucesso!')\r\n                    .catch(()=> {throw new Error('Não foi possível adicionar a negociacao.')})\r\n          );//fim then\r\n    }\r\n\r\n\r\n    lista(){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection =>               \r\n                    new NegociacaoDao(connection)\r\n                    .listaTodos()\r\n                    .catch(erro => {throw new Error('Não foi possível obter as negociações:'+erro)})\r\n                );//fim then\r\n    }\r\n\r\n\r\n    apaga(){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection =>               \r\n                    new NegociacaoDao(connection)\r\n                    .apagaTodos()\r\n                    .catch(erro => {throw new Error('Não foi possível obter as negociações:'+erro)})\r\n                );//fim then\r\n    }\r\n\r\n\r\n\r\n    importa(listaAtual){\r\n       return this.obterNegociacoes()\r\n       .then(negociacoes => {\r\n            \r\n            return negociacoes.filter( negociacao => \r\n                    !listaAtual.negociacoes\r\n                    .some(negociacaoExistente => negociacaoExistente.equals(negociacao) ))})\r\n                    //JSON.stringify(negociacaoExistente) == JSON.stringify(negociacao) ))})\r\n                    .then(negociacoes => {\r\n                        negociacoes.forEach(negociacao => listaAtual.adiciona(negociacao));\r\n                        return 'Negociações do período importadas com sucesso';\r\n                    })\r\n                    .catch(error => error);\r\n               ;\r\n       \r\n    }//importa\r\n\r\n\r\n}//fim class"]}