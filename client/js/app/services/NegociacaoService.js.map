{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","httpService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","error","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","send","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","Error","erro","negociacao","getConnection","connection","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","negociacaoExistente","equals","forEach"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService{\r\n\r\n        /**\r\n                 * 0: requisicao ainda nao iniciada\r\n                 * 1: conexao com o servidor estabelecida\r\n                 * 2: requisicao recebida\r\n                 * 3: processando requisicao\r\n                 * 4: requisicao concluida e a resposta esta pronta\r\n                 */\r\n\r\n    constructor(httpService){\r\n        this._http = httpService;\r\n    }\r\n\r\n    obterNegociacoesDaSemana(){\r\n        return new Promise((resolve, reject)=>{\r\n                this._http.get('http://localhost:3000/negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto =>                                              \r\n                        new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)));\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);    \r\n                    reject(\"Não foi possível obter as negociacoes da semana.\")\r\n                });                       \r\n                   \r\n        });\r\n\r\n    \r\n    }//obterNegociacoesDaSemana()\r\n    \r\n\r\n    obterNegociacoesDaSemanaRetrasada(){\r\n        return new Promise((resolve, reject)=>{\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', 'http://localhost:3000/negociacoes/retrasada');\r\n    \r\n            xhr.onreadystatechange = () =>{\r\n            \r\n    \r\n                 if(xhr.readyState == 4){\r\n                     if(xhr.status ==200){\r\n                        console.log(\"Buscando negociacoes\");\r\n                        let negociacoes = JSON.parse(xhr.responseText).map(objeto =>                                              \r\n                             new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)\r\n                        );\r\n                        //this._mensagem.texto = 'As negociacoes foram importadas com sucesso!';\r\n                        resolve(negociacoes);\r\n                       \r\n                     }else{\r\n                        console.log(xhr.responseText);\r\n                        //this._mensagem.texto = 'Não foi possível obter as negociacoes da semana';\r\n                        reject('Não foi possível obter as negociacoes da semana retrasada');\r\n                     }//fim else\r\n                 }//fim if externo\r\n            }// xhr.onreadystatechange = () =>{\r\n    \r\n    \r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n\r\n    obterNegociacoesDaSemanaAnterior(){\r\n        return new Promise((resolve, reject)=>{\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', 'http://localhost:3000/negociacoes/anterior');\r\n    \r\n            xhr.onreadystatechange = () =>{\r\n            \r\n    \r\n                 if(xhr.readyState == 4){\r\n                     if(xhr.status ==200){\r\n                        console.log(\"Buscando negociacoes\");\r\n                        let negociacoes = JSON.parse(xhr.responseText).map(objeto =>                                              \r\n                             new Negociacao(new Date(objeto.data),objeto.quantidade,objeto.valor)\r\n                        );\r\n                        //this._mensagem.texto = 'As negociacoes foram importadas com sucesso!';\r\n                        resolve(negociacoes);\r\n                       \r\n                     }else{\r\n                        console.log(xhr.responseText);\r\n                        //this._mensagem.texto = 'Não foi possível obter as negociacoes da semana';\r\n                        reject('Não foi possível obter as negociacoes da semana anterior');\r\n                     }//fim else\r\n                 }//fim if externo\r\n            }// xhr.onreadystatechange = () =>{\r\n    \r\n    \r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n\r\n\r\n    \r\n    obterNegociacoes() {\r\n\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n\r\n    } \r\n\r\n\r\n    cadastra(negociacao){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection =>               \r\n                    new NegociacaoDao(connection)\r\n                    .adiciona(negociacao)\r\n                    .then(()=>'Negociação adicionada com sucesso!')\r\n                    .catch(()=> {throw new Error('Não foi possível adicionar a negociacao.')})\r\n          );//fim then\r\n    }\r\n\r\n\r\n    lista(){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection =>               \r\n                    new NegociacaoDao(connection)\r\n                    .listaTodos()\r\n                    .catch(erro => {throw new Error('Não foi possível obter as negociações:'+erro)})\r\n                );//fim then\r\n    }\r\n\r\n\r\n    apaga(){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection =>               \r\n                    new NegociacaoDao(connection)\r\n                    .apagaTodos()\r\n                    .catch(erro => {throw new Error('Não foi possível obter as negociações:'+erro)})\r\n                );//fim then\r\n    }\r\n\r\n\r\n\r\n    importa(listaAtual){\r\n       return this.obterNegociacoes()\r\n       .then(negociacoes => {\r\n            \r\n            return negociacoes.filter( negociacao => \r\n                    !listaAtual.negociacoes\r\n                    .some(negociacaoExistente => negociacaoExistente.equals(negociacao) ))})\r\n                    //JSON.stringify(negociacaoExistente) == JSON.stringify(negociacao) ))})\r\n                    .then(negociacoes => {\r\n                        negociacoes.forEach(negociacao => listaAtual.adiciona(negociacao));\r\n                        return 'Negociações do período importadas com sucesso';\r\n                    })\r\n                    .catch(error => error);\r\n               ;\r\n       \r\n    }//importa\r\n\r\n\r\n}//fim class"]}