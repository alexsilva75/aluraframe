{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAU;AAC/B,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAGI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;AALL;AAAA;AAAA,4CAQ0B;AAClB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA,wBAAIE,UAAJ;;AAEAM,gCAAYI,eAAZ,GAA8B,aAAK;;AAEnCd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEC,qBAJD;;AAMAR,gCAAYS,SAAZ,GAAwB,aAAI;;AAExB,4BAAG,CAACf,UAAJ,EAAgB;AACZA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAIH;AACDE,gCAAQJ,UAAR;AAEH,qBAZD;;AAeAM,gCAAYW,OAAZ,GAAuB,aAAK;AACxBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAKH,iBA/BM,CAAP;AAgCH;AAzCL;AAAA;AAAA,0CA2CyBrB,UA3CzB,EA2CoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;;AAEDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBAND;AAQH;AApDL;AAAA;AAAA,8CAsD4B;AACpB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AA3DL;;AAAA;AAAA;AA6DH,CApEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function(){\r\n    const stores = ['negociacoes'];\r\n    const version = 3;\r\n    const dbName = 'aluraframe';\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    return class ConnectionFactory{\r\n\r\n\r\n        constructor(){\r\n            throw new Error(\"Esta classe nao pode ser instanciada.\");\r\n        }\r\n\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n                var openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                var connection;\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    \r\n                ConnectionFactory._createStores(e.target.result); \r\n                \r\n                };\r\n        \r\n                openRequest.onsuccess = e =>{\r\n\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode fechar a conexão diretamente.');\r\n                        }\r\n                    \r\n                    }\r\n                    resolve(connection);\r\n\r\n                };\r\n        \r\n        \r\n                openRequest.onerror =  e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n        \r\n            });\r\n        }\r\n\r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();"]}