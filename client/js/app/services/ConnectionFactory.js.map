{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAGT,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;;;oDAGqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA,gCAAIE,UAAJ;;AAEAO,wCAAYI,eAAZ,GAA8B,aAAK;;AAEnCT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEC,6BAJD;;AAMAR,wCAAYS,SAAZ,GAAwB,aAAI;;AAExB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAIH;AACDE,wCAAQL,UAAR;AAEH,6BAZD;;AAeAO,wCAAYW,OAAZ,GAAuB,aAAK;AACxBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAKH,yBA/BM,CAAP;AAgCH;;;kDAEoBtB,U,EAAW;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;;AAED1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBAND;AAQH;;;sDAEuB;AACpB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\r\n    const version = 3;\r\n    const dbName = 'aluraframe';\r\n    var connection = null;\r\n    var close = null;\r\n\r\n    export class ConnectionFactory{\r\n\r\n\r\n        constructor(){\r\n            throw new Error(\"Esta classe nao pode ser instanciada.\");\r\n        }\r\n\r\n\r\n        static getConnection(){\r\n            return new Promise((resolve, reject) => {\r\n                var openRequest = window.indexedDB.open(dbName, version);\r\n\r\n                var connection;\r\n\r\n                openRequest.onupgradeneeded = e => {\r\n                    \r\n                ConnectionFactory._createStores(e.target.result); \r\n                \r\n                };\r\n        \r\n                openRequest.onsuccess = e =>{\r\n\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode fechar a conexão diretamente.');\r\n                        }\r\n                    \r\n                    }\r\n                    resolve(connection);\r\n\r\n                };\r\n        \r\n        \r\n                openRequest.onerror =  e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n        \r\n            });\r\n        }\r\n\r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n"]}